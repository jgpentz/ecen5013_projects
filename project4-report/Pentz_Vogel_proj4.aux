\relax 
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Reading from the config register\relax }}{1}}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces Writing to the config register\relax }}{2}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Reading from the status register\relax }}{2}}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces Writing to the tx register\relax }}{3}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Confirming that we wrote to the tx register by reading from it\relax }}{3}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces Writing to the RF configuration register\relax }}{4}}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces Reading from the RF configuration register to make sure we are outputting power correctly\relax }}{4}}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces Reading the FIFO status register\relax }}{5}}
\@writefile{lof}{\contentsline {figure}{\numberline {9}{\ignorespaces The beaglebone being bad at sending SPI signals, note how it is off by one bit.\relax }}{5}}
\@writefile{lof}{\contentsline {figure}{\numberline {10}{\ignorespaces Before we write a payload to the transceiver we knew it was important to flush the transciever.\relax }}{6}}
\@writefile{lof}{\contentsline {figure}{\numberline {11}{\ignorespaces As can be seen in the figure, we were able to write a payload to the transceiver transmit buffer.\relax }}{6}}
\@writefile{lof}{\contentsline {figure}{\numberline {12}{\ignorespaces How an ideal implementation of this would be. Implement a Class that automatically sets up the SPI interface. That class has methods that could send an arbitrary amount of data, or read in an arbitrary amount of data. This is done by wrapping the low level firmware calls that access individual bytes from the SPI interface, which is of course implemented in hardware and connected to the Nordic module.\relax }}{7}}
