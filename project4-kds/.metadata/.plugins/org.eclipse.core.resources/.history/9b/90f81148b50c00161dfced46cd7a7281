/*
 * nRF24L01.c
 *
 *  Created on: Apr 25, 2016
 *      Author: jimmy
 */

#include "MKL25Z4.h"
#include "nRF24L01.h"
#include "spi.h"

void write_config(uint8_t config_command){
	FGPIOD_PCOR |= (1<<0);
	spi_send_byte(NORDIC_WR_REG | NORDIC_CONFIG_REG);	// Initiate a write to the config reg
	spi_send_byte(DUMMY_BYTE);						// Send config command
	spi_send_byte(config_command);						// Send config command
	spi_send_byte(DUMMY_BYTE);						// Send config command
	spi_send_byte(DUMMY_BYTE);						// Send config command
	FGPIOD_PSOR |= (1<<0);
}

void read_config(uint8_t * config_data){
	uint8_t tmp_data, dummy_data, dummy_data1, dummy_data2, dummy_data3;

	FGPIOD_PCOR |= (1<<0);								// Set SS low
	spi_send_byte(NORDIC_RD_REG | NORDIC_CONFIG_REG);	// Initiate a read to config reg
	spi_receive_byte((uint8_t *)&tmp_data);				// receive important first byte
	spi_receive_byte((uint8_t *)&dummy_data1);
	spi_receive_byte((uint8_t *)&dummy_data2);
	spi_receive_byte((uint8_t *)&dummy_data3);
	FGPIOD_PSOR |= (1<<0);								// Set SS high
	*config_data = tmp_data;
}

void read_status(uint8_t * status_data){
	uint8_t tmp_data, dummy_data, dummy_data1, dummy_data2, dummy_data3;

	FGPIOD_PCOR |= (1<<0);								// Set SS low
	spi_send_byte(NORDIC_STATUS_NOP);	// Initiate a read to config reg
	spi_receive_byte((uint8_t *)&tmp_data);				// receive important first byte
	spi_receive_byte((uint8_t *)&dummy_data1);
	spi_receive_byte((uint8_t *)&dummy_data2);
	spi_receive_byte((uint8_t *)&dummy_data3);
	FGPIOD_PSOR |= (1<<0);								// Set SS high
	*status_data = tmp_data;
}

void read_fifo(uint8_t * fifo_data){
	uint8_t tmp_data, dummy_data, dummy_data1, dummy_data2, dummy_data3;

	FGPIOD_PCOR |= (1<<0);								// Set SS low
	spi_send_byte(NORDIC_RD_REG | NORDIC_FIFO_STATUS_REG);	// Initiate a read to config reg
	spi_receive_byte((uint8_t *)&tmp_data);				// receive important first byte
	spi_receive_byte((uint8_t *)&dummy_data1);
	spi_receive_byte((uint8_t *)&dummy_data2);
	spi_receive_byte((uint8_t *)&dummy_data3);
	FGPIOD_PSOR |= (1<<0);								// Set SS high
	*fifo_data = tmp_data;
}

void read_rf_setup(uint8_t * rf_setup_data){
	uint8_t tmp_data, dummy_data, dummy_data1, dummy_data2, dummy_data3;

	FGPIOD_PCOR |= (1<<0);								// Set SS low
	spi_send_byte(NORDIC_RD_REG | NORDIC_RF_SETUP_REG);	// Initiate a read to config reg
	spi_receive_byte((uint8_t *)&tmp_data);				// receive important first byte
	spi_receive_byte((uint8_t *)&dummy_data1);
	spi_receive_byte((uint8_t *)&dummy_data2);
	spi_receive_byte((uint8_t *)&dummy_data3);
	FGPIOD_PSOR |= (1<<0);								// Set SS high
	*rf_setup_data = tmp_data;
}

void write_rf_setup(uint8_t rf_setup_command){
	FGPIOD_PCOR |= (1<<0);
	spi_send_byte(NORDIC_WR_REG | NORDIC_RF_SETUP_REG);	// Initiate a write to the config reg
	spi_send_byte(rf_setup_command);							// Send config command
	spi_send_byte(rf_setup_command);					// Send config command
	spi_send_byte(rf_setup_command);							// Send config command
	spi_send_byte(rf_setup_command);							// Send config command
	FGPIOD_PSOR |= (1<<0);
}

void write_tx_payload(uint8_t *tx_data, int length){
	int i;

	FGPIOD_PCOR |= (1<<0);
	spi_send_byte(NORDIC_TX_PAYLOAD);
	for(i=0;i<length;i++){
		spi_send_byte(tx_data);
		tx_data++;
	}
	FGPIOD_PSOR |= (1<<0);
}
